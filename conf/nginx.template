# This is a custom nginx configuration template for Kong specs

worker_processes ${{NGINX_WORKER_PROCESSES}};
daemon ${{NGINX_DAEMON}};

pid pids/nginx.pid; # mandatory even for custom config templates
error_log /usr/local/openresty/nginx/logs/error.log ${{LOG_LEVEL}};

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    resolver ${{DNS_RESOLVER}} ipv6=off;
    charset UTF-8;

    gzip on;
    gzip_http_version 1.1;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js;
    gzip_buffers 16 8k;

    proxy_cache_path /tmp/cache keys_zone=mem_cache_zone:25m loader_threshold=300 loader_files=200 max_size=100m;

    error_log /usr/local/openresty/nginx/logs/error.log ${{LOG_LEVEL}};
    access_log /usr/local/openresty/nginx/logs/access.log;

> if anonymous_reports then
    ${{SYSLOG_REPORTS}}
> end

    client_max_body_size 0;
    proxy_ssl_server_name on;
    underscores_in_headers on;

    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;

    real_ip_header X-Forwarded-For;
    set_real_ip_from 0.0.0.0/0;
    real_ip_recursive on;

    reset_timedout_connection on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    lua_package_path '${{LUA_PACKAGE_PATH}};;';
    lua_package_cpath '${{LUA_PACKAGE_CPATH}};;';
    lua_code_cache ${{LUA_CODE_CACHE}};
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_shared_dict kong 4m;
    lua_shared_dict cache ${{MEM_CACHE_SIZE}};
    lua_shared_dict cache_locks 100k;
    lua_shared_dict cassandra 1m;
    lua_shared_dict cassandra_prepared 5m;
    lua_socket_log_errors off;
> if lua_ssl_trusted_certificate then
    lua_ssl_trusted_certificate '${{lua_ssl_trusted_certificate}}';
> end

    init_by_lua_block {
        require 'resty.core'
        kong = require 'kong'
        kong.init()
    }

    init_worker_by_lua_block {
        kong.init_worker()
    }

    server {
        server_name kong;
        proxy_cache mem_cache_zone;

        listen ${{PROXY_LISTEN}};
        error_page 404 408 411 412 413 414 417 /kong_error_handler;
        error_page 500 502 503 504 /kong_error_handler;

> if ssl then
        listen ${{PROXY_LISTEN_SSL}} ssl;
        ssl_certificate ${{SSL_CERT}};
        ssl_certificate_key ${{SSL_CERT_KEY}};
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate_by_lua_block {
            kong.ssl_certificate()
        }
> end

        location / {
            set $upstream_host nil;
            set $upstream_url nil;

            access_by_lua_block {
                kong.access()
            }

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $upstream_host;
            proxy_pass_header Server;
            proxy_pass $upstream_url;
            proxy_cache_valid 200 302 5m;
            proxy_cache_min_uses 1;
            proxy_cache_valid 404 1m;
            add_header X-Cache-Status $upstream_cache_status;
            proxy_cache_use_stale error timeout invalid_header http_500 http_502 http_503 http_504;

            header_filter_by_lua_block {
                kong.header_filter()
            }

            body_filter_by_lua_block {
                kong.body_filter()
            }

            log_by_lua_block {
                kong.log()
            }
        }

        location = /kong_error_handler {
            internal;
            content_by_lua_block {
                require('kong.core.error_handlers')(ngx)
            }
        }
    }

    server {
        server_name kong_admin;
        listen ${{ADMIN_LISTEN}};

        client_max_body_size 10m;
        client_body_buffer_size 10m;

        location / {
            default_type application/json;
            content_by_lua_block {
                ngx.header['Access-Control-Allow-Origin'] = '*'
                if ngx.req.get_method() == 'OPTIONS' then
                    ngx.header['Access-Control-Allow-Methods'] = 'GET,HEAD,PUT,PATCH,POST,DELETE'
                    ngx.header['Access-Control-Allow-Headers'] = 'Content-Type'
                    ngx.exit(204)
                end

                require('lapis').serve('kong.api')
            }
        }

        location /nginx_status {
            internal;
            access_log off;
            stub_status;
        }

        location /healthcheck {
            return 200 'Kong APIs is healthy!';
            access_log off;
        }

        location = /_.gif {
            empty_gif;
            access_log off;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }
}
